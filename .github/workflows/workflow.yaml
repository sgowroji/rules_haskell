name: Continuous integration
on:
  push:
  pull_request:
    branches: master
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: '1 11 * * *'
env:
  # Bump this number to invalidate the GH actions cache
  cache-version: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: tweag/configure-bazel-remote-cache-auth@v0
        with:
          buildbuddy_api_key: ${{ secrets.BUILDBUDDY_API_KEY }}
          bazelrc_path: .bazelrc.auth
      - uses: ./.github/actions/set_tcp_keepalive_time
      - uses: ./.github/actions/authenticate_github_api
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure
        run: |
          cat >>.bazelrc.local <<EOF
          common --config=ci
          EOF
      - run: |
          bazelisk test buildifier:buildifier_test

  test-nixpkgs:
    name: Build & Test - Nixpkgs
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        module: [rules_haskell]
        bzlmod: [false]
        ghc:
          - 9.2.8
        exclude:
          - module: rules_haskell_nix

            bzlmod: false
          # TODO: in a MODULE.bazel file we declare version specific dependencies, would need to use stack snapshot json
          #       and stack config per GHC version
          - ghc: 9.4.6
            bzlmod: true
          - ghc: 9.6.2
            bzlmod: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/free_disk_space_on_linux
      - name: Mount Bazel cache
        uses: actions/cache@v3
        with:
          path: ~/repo-cache
          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}
      - uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=./nixpkgs/default.nix
          extra_nix_config: |
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
            extra-substituters = https://cache.iog.io
      - uses: tweag/configure-bazel-remote-cache-auth@v0
        with:
          buildbuddy_api_key: ${{ secrets.BUILDBUDDY_API_KEY }}
          bazelrc_path: .bazelrc.auth
      - uses: ./.github/actions/set_tcp_keepalive_time
      - uses: ./.github/actions/authenticate_github_api
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure
        run: |
          case ${{ runner.os }} in
            macOS) BUILD_CONFIG=ci-macos-nixpkgs;;
            Linux) BUILD_CONFIG=ci-linux-nixpkgs;;
          esac
          cat >>.bazelrc.local <<EOF
          common --config=ci
          build --config=$BUILD_CONFIG
          common --enable_bzlmod=${{ matrix.bzlmod }}
          EOF
          cp .bazelrc.local rules_haskell_nix
          cp .bazelrc.local rules_haskell_tests
      - name: Check Bazel version
        run: |
          nix-shell --arg docTools false --argstr ghcVersion ${{ matrix.ghc }} --pure --run .ci/check-bazel-version
      - name: Build & test - rules_haskell
        if: matrix.module == 'rules_haskell'
        run: |
          nix-shell --arg docTools false --argstr ghcVersion ${{ matrix.ghc }} --pure --run '
            set -euo pipefail
            bazel test //...
            bazel build //docs:api_html
            bazel build //docs:guide_html
            '
      - name: Build & test - rules_haskell_nix
        if: matrix.module == 'rules_haskell_nix'
        run: |
          nix-shell --arg docTools false --argstr ghcVersion ${{ matrix.ghc }} --pure --run '
            set -euo pipefail
            cd rules_haskell_nix
            bazel test //...
            '
      - name: Build & test - rules_haskell_tests
        if: matrix.module == 'rules_haskell_tests'
        run: |
          nix-shell --arg docTools false --argstr ghcVersion ${{ matrix.ghc }} --pure --run '
            set -euo pipefail
            cd rules_haskell_tests
            # XXX run start script `--with-bzlmod=true` when supported
            if ! ${{ matrix.bzlmod }}; then
              ./tests/run-start-script.sh --use-nix --with-bzlmod=${{ matrix.bzlmod }}
            fi
            bazel build //tests:run-tests
            ./bazel-ci-bin/tests/run-tests
            bazel coverage //...
            '
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ always() }}

  all_ci_tests:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test-nixpkgs
    if: ${{ always() }}
    steps:
      - uses: cgrindel/gha_join_jobs@794a2d117251f22607f1aab937d3fd3eaaf9a2f5 # v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
